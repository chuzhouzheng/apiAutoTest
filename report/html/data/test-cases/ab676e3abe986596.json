{
  "uid" : "ab676e3abe986596",
  "name" : "get请求查询用户数据列表",
  "fullName" : "test.test_api#test_main",
  "historyId" : "f9a3a528aa08d345b131e068670a2332",
  "time" : {
    "start" : 1626865503985,
    "stop" : 1626865504047,
    "duration" : 62
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 第1个断言失败 -|- 实际结果:{'msg': 'pagenum 参数错误', 'status': 400} || 预期结果: {'msg': '登录成功', 'status': 200}",
  "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': 'pagenum 参数错误', 'status': 400}}\nexpect_str = '{\"$.meta\":{\\'msg\\': \\'登录成功\\', \\'status\\': 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:133: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c4', 'get请求查询用户数据列表', '', 'users', 'get', 'data', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': 'pagenum 参数错误', 'status': 400}}\nexpect_str = '{\"$.meta\":{\\'msg\\': \\'登录成功\\', \\'status\\': 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n                raise AssertionError(\n>                   f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 第1个断言失败 -|- 实际结果:{'msg': 'pagenum 参数错误', 'status': 400} || 预期结果: {'msg': '登录成功', 'status': 200}\n\ntools/data_process.py:136: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1626865503984,
      "stop" : 1626865503984,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 第1个断言失败 -|- 实际结果:{'msg': 'pagenum 参数错误', 'status': 400} || 预期结果: {'msg': '登录成功', 'status': 200}",
    "statusTrace" : "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': 'pagenum 参数错误', 'status': 400}}\nexpect_str = '{\"$.meta\":{\\'msg\\': \\'登录成功\\', \\'status\\': 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools/data_process.py:133: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['c4', 'get请求查询用户数据列表', '', 'users', 'get', 'data', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest/test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': 'pagenum 参数错误', 'status': 400}}\nexpect_str = '{\"$.meta\":{\\'msg\\': \\'登录成功\\', \\'status\\': 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        allure_step(\"当前可用参数池\", cls.extra_pool)\n        expect_str = rep_expr(expect_str, cls.extra_pool)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n                raise AssertionError(\n>                   f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 第1个断言失败 -|- 实际结果:{'msg': 'pagenum 参数错误', 'status': 400} || 预期结果: {'msg': '登录成功', 'status': 200}\n\ntools/data_process.py:136: AssertionError",
    "steps" : [ {
      "name" : "请求地址: http://api.zreai.com:606/api/private/v1/users",
      "time" : {
        "start" : 1626865503986,
        "stop" : 1626865503986,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1626865503986,
        "stop" : 1626865503987,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "7d2625d3623cb1a",
        "name" : "请求头",
        "source" : "7d2625d3623cb1a.json",
        "type" : "application/json",
        "size" : 420
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "请求数据",
      "time" : {
        "start" : 1626865503987,
        "stop" : 1626865503987,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "13f49585a860eb06",
        "name" : "请求数据",
        "source" : "13f49585a860eb06.json",
        "type" : "application/json",
        "size" : 42
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "响应耗时(s): 0.050634",
      "time" : {
        "start" : 1626865504042,
        "stop" : 1626865504043,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "响应结果",
      "time" : {
        "start" : 1626865504043,
        "stop" : 1626865504044,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d7891a66e7ba0a21",
        "name" : "响应结果",
        "source" : "d7891a66e7ba0a21.json",
        "type" : "application/json",
        "size" : 102
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "当前可用参数池",
      "time" : {
        "start" : 1626865504044,
        "stop" : 1626865504044,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "2ce918d23a70aa6c",
        "name" : "当前可用参数池",
        "source" : "2ce918d23a70aa6c.json",
        "type" : "application/json",
        "size" : 271
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "第1个断言",
      "time" : {
        "start" : 1626865504046,
        "stop" : 1626865504047,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ecc477db20223639",
        "name" : "第1个断言",
        "source" : "ecc477db20223639.json",
        "type" : "application/json",
        "size" : 115
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "a9e5dba89f7e48cf",
      "name" : "stderr",
      "source" : "a9e5dba89f7e48cf.txt",
      "type" : "text/plain",
      "size" : 1543
    } ],
    "parameters" : [ ],
    "stepsCount" : 7,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "host",
    "value" : "zhouu.local"
  }, {
    "name" : "thread",
    "value" : "42030-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['c4', 'get请求查询用户数据列表', '', 'users', 'get', 'data', '', '{\"pagenum\": 1, \"pagesize\": \"12\"}', '', '', '{\"$.meta\":${meta}}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ab676e3abe986596.json",
  "parameterValues" : [ "['c4', 'get请求查询用户数据列表', '', 'users', 'get', 'data', '', '{\"pagenum\": 1, \"pagesize\": \"12\"}', '', '', '{\"$.meta\":${meta}}']" ]
}